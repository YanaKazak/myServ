'use strict';

// code mostly from https://github.com/sindresorhus/ora

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var screen = require('./screen');

var Spinner = function () {
  function Spinner(options) {
    (0, _classCallCheck3.default)(this, Spinner);

    this.options = (0, _assign2.default)({
      text: ''
    }, options);

    this.ansi = require('ansi-escapes');
    var spinners = require('./spinners.json');

    this.command = this.options.command;
    this.color = this.options.color || 'heroku';
    this.spinner = process.platform === 'win32' ? spinners.line : this.options.spinner ? spinners[this.options.spinner] : spinners.dots2;
    this.text = this.options.text;
    this.interval = this.options.interval || this.spinner.interval || 100;
    this.id = null;
    this.frameIndex = 0;
    this.stream = this.options.stream || process.stderr;
  }

  (0, _createClass3.default)(Spinner, [{
    key: 'start',
    value: function start() {
      if (this.id) return;
      this.enabled = true;
      this.stream.write(this.ansi.cursorLeft);
      this.stream.write(this.ansi.eraseLine);
      this.stream.write(this.ansi.cursorHide);
      this._render();
      this.id = setInterval(this._spin.bind(this), this.interval);
      process.on('SIGWINCH', this._sigwinch = this._render.bind(this));
    }
  }, {
    key: 'stop',
    value: function stop(status) {
      if (status && !this.enabled) console.error(' ' + status);
      if (!this.enabled) return;
      if (status) this._status = status;

      process.removeListener('SIGWINCH', this._sigwinch);
      clearInterval(this.id);
      this.id = null;
      this.enabled = false;
      this.frameIndex = 0;
      this._render();
      this.stream.write(this.ansi.cursorShow);
    }
  }, {
    key: 'clear',
    value: function clear() {
      if (!this._output) return;
      this.stream.write(this.ansi.cursorUp(this._lines(this._output)));
      this.stream.write(this.ansi.eraseDown);
    }
  }, {
    key: '_render',
    value: function _render() {
      if (this._output) this.clear();
      this._output = '' + this.text + (this.enabled ? ' ' + this._frame() : '') + ' ' + (this.status ? this.status : '') + '\n';
      this.stream.write(this._output);
    }
  }, {
    key: '_lines',
    value: function _lines(s) {
      var _this = this;

      return this.command.color.stripColor(s).split('\n').map(function (l) {
        return Math.ceil(l.length / _this._width);
      }).reduce(function (c, i) {
        return c + i;
      }, 0);
    }
  }, {
    key: '_spin',
    value: function _spin() {
      this.stream.write(this.ansi.cursorUp(this._lines(this._output)));
      var y = this._lines(this.text) - 1;
      var lastline = this.command.color.stripColor(this.text).split('\n').pop();
      var x = 1 + lastline.length - (this._lines(lastline) - 1) * this._width;
      this.stream.write(this.ansi.cursorMove(x, y));
      this.stream.write(this._frame());
      this.stream.write(this.ansi.cursorDown(this._lines(this._output) - y));
      this.stream.write(this.ansi.cursorLeft);
      this.stream.write(this.ansi.eraseLine);
    }
  }, {
    key: '_frame',
    value: function _frame() {
      var frames = this.spinner.frames;
      var frame = frames[this.frameIndex];
      if (this.color) frame = this.command.color[this.color](frame);
      this.frameIndex = ++this.frameIndex % frames.length;
      return frame;
    }
  }, {
    key: 'status',
    get: function get() {
      return this._status;
    },
    set: function set(status) {
      this._status = status;
      if (this.enabled) this._render();else this.command.write.error(' ' + this.status + '\n' + this.text);
    }
  }, {
    key: 'text',
    get: function get() {
      return this._text;
    },
    set: function set(text) {
      this._text = text;
      if (this.enabled) this._render();
    }
  }, {
    key: '_width',
    get: function get() {
      return screen.errtermwidth;
    }
  }]);
  return Spinner;
}();

module.exports = Spinner;