'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomColors = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _screen = require('./screen');

var _action = require('./action');

var _action2 = _interopRequireDefault(_action);

var _supportsColor = require('supports-color');

var _supportsColor2 = _interopRequireDefault(_supportsColor);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* globals
   stream$Writable
   $Shape
 */

var util = require('util');
var linewrap = require('./linewrap');

var CustomColors = exports.CustomColors = {
  supports: _supportsColor2.default,
  attachment: function attachment(s) {
    return _chalk2.default.cyan(s);
  },
  addon: function addon(s) {
    return _chalk2.default.yellow(s);
  },
  configVar: function configVar(s) {
    return _chalk2.default.green(s);
  },
  release: function release(s) {
    return _chalk2.default.blue.bold(s);
  },
  cmd: function cmd(s) {
    return _chalk2.default.cyan.bold(s);
  },
  app: function app(s) {
    return process.platform !== 'win32' ? CustomColors.heroku('\u2B22 ' + s) : CustomColors.heroku(s);
  },
  heroku: function heroku(s) {
    if (!CustomColors.supports) return s;
    var has256 = CustomColors.supports.has256 || (process.env.TERM || '').indexOf('256') !== -1;
    return has256 ? '\x1B[38;5;104m' + s + _chalk2.default.styles.reset.open : _chalk2.default.magenta(s);
  }
};

if (['false', '0'].indexOf((process.env.COLOR || '').toLowerCase()) !== -1) CustomColors.supports = false;

function wrap(msg) {
  return linewrap(6, _screen.errtermwidth, {
    skipScheme: 'ansi-color',
    skip: /^\$ .*$/
  })(msg || '');
}

function bangify(msg, c) {
  var lines = msg.split('\n');
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    lines[i] = ' ' + c + line.substr(2, line.length);
  }
  return lines.join('\n');
}

function getErrorMessage(err) {
  if (err.body) {
    // API error
    if (err.body.message) {
      return err.body.message;
    } else if (err.body.error) {
      return err.body.error;
    }
  }
  // Unhandled error
  if (err.message && err.code) {
    return util.inspect(err.code) + ': ' + err.message;
  } else if (err.message) {
    return err.message;
  }
  return err;
}

var arrow = process.platform === 'win32' ? '!' : 'â–¸';

var StreamOutput = function () {
  function StreamOutput(stream, output) {
    (0, _classCallCheck3.default)(this, StreamOutput);
    this.output = '';

    this.out = output;
    this.stream = stream;
    this.stream.on('error', function (err) {
      if (err.code !== 'EPIPE') throw err;
    });
  }

  (0, _createClass3.default)(StreamOutput, [{
    key: 'write',
    value: function write(msg) {
      if (this.out.config.mock) this.output += msg;
      this.stream.write(msg);
    }
  }, {
    key: 'log',
    value: function log(data) {
      var _this = this,
          _arguments = arguments;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      this.out.action.pause(function () {
        var _console;

        if (_this.out.config.mock) _this.output += util.format.apply(util, [data].concat((0, _toConsumableArray3.default)(args)));else if (_arguments.length === 0) console.log();else (_console = console).log.apply(_console, [data].concat((0, _toConsumableArray3.default)(args)));
      });
    }
  }]);
  return StreamOutput;
}();

var Output = function () {
  function Output(config) {
    (0, _classCallCheck3.default)(this, Output);

    this.config = config;
    this.stdout = new StreamOutput(process.stdout, this);
    this.stderr = new StreamOutput(process.stderr, this);
    this.action = new _action2.default(this);

    this.color = new Proxy(_chalk2.default, {
      get: function get(chalk, name) {
        if (CustomColors[name]) return CustomColors[name];
        return chalk[name];
      }
    });
  }

  (0, _createClass3.default)(Output, [{
    key: 'init',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: 'done',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.showCursor();
                this.action.stop();

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function done() {
        return _ref2.apply(this, arguments);
      }

      return done;
    }()
  }, {
    key: 'log',
    value: function log(data) {
      var _stdout;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_stdout = this.stdout).log.apply(_stdout, [data].concat((0, _toConsumableArray3.default)(args)));
    }
  }, {
    key: 'styledJSON',
    value: function styledJSON(obj) {
      var json = (0, _stringify2.default)(obj, null, 2);
      if (CustomColors.supports) {
        var cardinal = require('cardinal');
        var theme = require('cardinal/themes/jq');
        this.log(cardinal.highlight(json, { json: true, theme: theme }));
      } else {
        this.log(json);
      }
    }
  }, {
    key: 'styledHeader',
    value: function styledHeader(header) {
      this.log(this.color.gray('=== ') + this.color.bold(header));
    }
  }, {
    key: 'styledObject',
    value: function styledObject(obj, keys) {
      var _this2 = this;

      var util = require('util');
      var keyLengths = (0, _keys2.default)(obj).map(function (key) {
        return key.toString().length;
      });
      var maxKeyLength = Math.max.apply(Math, keyLengths) + 2;
      function pp(obj) {
        if (typeof obj === 'string' || typeof obj === 'number') {
          return obj;
        } else if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) === 'object') {
          return (0, _keys2.default)(obj).map(function (k) {
            return k + ': ' + util.inspect(obj[k]);
          }).join(', ');
        } else {
          return util.inspect(obj);
        }
      }
      var logKeyValue = function logKeyValue(key, value) {
        _this2.log(key + ':' + ' '.repeat(maxKeyLength - key.length - 1) + pp(value));
      };
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(keys || (0, _keys2.default)(obj).sort()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          var value = obj[key];
          if (Array.isArray(value)) {
            if (value.length > 0) {
              logKeyValue(key, value[0]);
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = (0, _getIterator3.default)(value.slice(1)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var e = _step2.value;

                  this.log(' '.repeat(maxKeyLength) + pp(e));
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          } else if (value !== null && value !== undefined) {
            logKeyValue(key, value);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /**
     * inspect an object for debugging
     */

  }, {
    key: 'i',
    value: function i(obj) {
      this.action.pause(function () {
        console.dir(obj, { colors: true });
      });
    }
  }, {
    key: 'debug',
    value: function debug(obj) {
      if (this.debugging) this.action.pause(function () {
        return console.log(obj);
      });
    }
  }, {
    key: 'error',
    value: function error(err) {
      if (typeof err === 'string') err = new Error(err);
      if (this.action.task) this.action.stop(this.color.bold.red('!'));
      if (this.debugging) console.error(err.stack);else console.error(bangify(wrap(getErrorMessage(err)), this.color.red(arrow)));
    }
  }, {
    key: 'warn',
    value: function warn(message) {
      var _this3 = this;

      this.action.pause(function () {
        if (_this3.debugging) console.trace('WARNING: ' + util.inspect(message));else console.error(bangify(wrap(message), _this3.color.yellow(arrow)));
      });
    }
  }, {
    key: 'showCursor',
    value: function showCursor() {
      var ansi = require('ansi-escapes');
      if (process.stderr.isTTY) process.stderr.write(ansi.cursorShow);
    }
  }, {
    key: 'displaySpinner',
    get: function get() {
      return !!process.stdin.isTTY && !!process.stderr.isTTY && !process.env.CI && process.env.TERM !== 'dumb';
    }
  }]);
  return Output;
}();

exports.default = Output;