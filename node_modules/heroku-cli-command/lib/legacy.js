'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

var _mixins = require('./mixins');

var _mixins2 = _interopRequireDefault(_mixins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var api = function api(superclass) {
  return function (_superclass) {
    (0, _inherits3.default)(_class, _superclass);

    function _class() {
      (0, _classCallCheck3.default)(this, _class);
      return (0, _possibleConstructorReturn3.default)(this, (_class.__proto__ || (0, _getPrototypeOf2.default)(_class)).apply(this, arguments));
    }

    (0, _createClass3.default)(_class, [{
      key: 'init',
      value: function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
          var password, netrc, host;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return (0, _get3.default)(_class.prototype.__proto__ || (0, _getPrototypeOf2.default)(_class.prototype), 'init', this).call(this);

                case 2:
                  password = process.env.HEROKU_API_KEY;

                  if (!password) {
                    netrc = require('netrc')();
                    host = netrc['api.heroku.com'];

                    if (host) password = host.password;
                  }

                  if (password) {
                    _context.next = 6;
                    break;
                  }

                  throw new Error('Not logged in');

                case 6:
                  this.auth = { password: password };

                case 7:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function init() {
          return _ref.apply(this, arguments);
        }

        return init;
      }()
    }]);
    return _class;
  }(superclass);
};

exports.default = function (command) {
  var BaseCommand = _command2.default;
  if (command.needsApp) BaseCommand = _mixins2.default.app(BaseCommand);
  if (command.needsAuth) BaseCommand = api(BaseCommand);

  var NewCommand = function (_BaseCommand) {
    (0, _inherits3.default)(NewCommand, _BaseCommand);

    function NewCommand() {
      (0, _classCallCheck3.default)(this, NewCommand);
      return (0, _possibleConstructorReturn3.default)(this, (NewCommand.__proto__ || (0, _getPrototypeOf2.default)(NewCommand)).apply(this, arguments));
    }

    (0, _createClass3.default)(NewCommand, [{
      key: 'run',
      value: function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
          var ctx;
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  ctx = new Proxy(this, { get: function get(ctx, name) {
                      if (name === 'debug') return ctx.debugging;
                      return ctx[name];
                    } });
                  _context2.next = 3;
                  return command.run(ctx);

                case 3:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function run() {
          return _ref2.apply(this, arguments);
        }

        return run;
      }()
    }]);
    return NewCommand;
  }(BaseCommand);

  NewCommand.topic = command.topic;
  NewCommand.command = command.command;
  NewCommand.description = command.description;
  NewCommand.args = command.args;
  NewCommand.flags = command.flags;
  // TODO: variableArgs
  // NewCommand.variableArgs = command.variableArgs
  return NewCommand;
};