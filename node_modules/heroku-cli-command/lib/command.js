'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _http = require('./http');

var _http2 = _interopRequireDefault(_http);

var _output = require('./output');

var _output2 = _interopRequireDefault(_output);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Command = function (_Output) {
  (0, _inherits3.default)(Command, _Output);
  (0, _createClass3.default)(Command, null, [{
    key: 'id',
    get: function get() {
      return this.command ? this.topic + ':' + this.command : this.topic;
    }
  }, {
    key: 'flags',
    get: function get() {
      return this._flags;
    },
    set: function set(flags) {
      var _flags;

      (_flags = this._flags).push.apply(_flags, (0, _toConsumableArray3.default)(flags));
    }
  }, {
    key: 'args',
    get: function get() {
      return this._args;
    },
    set: function set(args) {
      var _args;

      (_args = this._args).push.apply(_args, (0, _toConsumableArray3.default)(args));
    }
  }]);

  function Command() {
    var argv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Command);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Command.__proto__ || (0, _getPrototypeOf2.default)(Command)).call(this, (0, _assign2.default)(_config.Default, config)));

    _this.argv = argv;
    _this.parser = new _parser2.default(_this);
    _this.http = (0, _http2.default)(_this);
    return _this;
  }

  (0, _createClass3.default)(Command, [{
    key: 'init',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.parser.parse();

              case 2:
                _context.next = 4;
                return (0, _get3.default)(Command.prototype.__proto__ || (0, _getPrototypeOf2.default)(Command.prototype), 'init', this).call(this);

              case 4:
                this.flags = this.parser.flags;
                this.args = this.parser.args;

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _ref.apply(this, arguments);
      }

      return init;
    }()

    /**
     * actual command run code goes here
     */

  }, {
    key: 'run',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error('must implement abstract class Command');

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function run() {
        return _ref2.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'done',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _get3.default)(Command.prototype.__proto__ || (0, _getPrototypeOf2.default)(Command.prototype), 'done', this).call(this);

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function done() {
        return _ref3.apply(this, arguments);
      }

      return done;
    }()
  }, {
    key: 'debugging',


    /**
     * get whether or not command is in debug mode
     * @returns {number} - 0 if not debugging, otherwise current debug level (1 or 2 usually)
     */
    get: function get() {
      if (this.flags && this.flags.debug) return 1;
      var HEROKU_DEBUG = process.env.HEROKU_DEBUG;
      if (HEROKU_DEBUG === 'true') return 1;
      if (HEROKU_DEBUG) return parseInt(HEROKU_DEBUG);
      return 0;
    }
  }]);
  return Command;
}(_output2.default);
/* globals
   $Shape
   Class
 */

Command._flags = [{ name: 'debug', hidden: true }, { name: 'no-color', hidden: true }];
Command._args = [];
exports.default = Command;