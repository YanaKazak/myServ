'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _screen = require('./output/screen');

var _output = require('./output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* globals
   Class
 */

var Topic = function (_Output) {
  (0, _inherits3.default)(Topic, _Output);

  function Topic(commands, config) {
    (0, _classCallCheck3.default)(this, Topic);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Topic.__proto__ || (0, _getPrototypeOf2.default)(Topic)).call(this, config));

    _this.commands = commands;
    _this.argv0 = config.argv0;
    return _this;
  }

  (0, _createClass3.default)(Topic, [{
    key: 'help',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(args, matchedCommand) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (matchedCommand) this.commandHelp(matchedCommand);
                if (this.constructor.topic === args[0]) this.listCommandsHelp();

              case 2:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function help(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return help;
    }()
  }, {
    key: 'listCommandsHelp',
    value: function listCommandsHelp() {
      var _this2 = this;

      var commands = this.commands.filter(function (c) {
        return !c.hidden;
      }).map(function (c) {
        return [_this2.usage(c), c.description];
      });
      if (commands.length === 0) return;
      this.log(this.argv0 + ' ' + this.constructor.topic + ' commands: (' + this.color.cmd(this.argv0 + ' help ' + this.constructor.topic + ':COMMAND') + ' for details)\n');
      this.log(this.renderList(commands));
      this.log();
    }
  }, {
    key: 'commandHelp',
    value: function commandHelp(command) {
      var usage = this.argv0 + ' ' + this.usage(command);
      this.log('Usage: ' + this.color.cmd(usage) + '\n');
      if (command.description) this.log(command.description.trim() + '\n');
      var flags = (command.flags || []).filter(function (f) {
        return !f.hidden;
      });
      if (flags.length) this.log(this.renderFlags(flags) + '\n');
      if (command.help) this.log(command.help.trim() + '\n');
    }
  }, {
    key: 'renderArg',
    value: function renderArg(arg) {
      var name = arg.name.toUpperCase();
      if (arg.required !== false && arg.optional !== true) return '' + name;else return '[' + name + ']';
    }
  }, {
    key: 'renderFlags',
    value: function renderFlags(flags) {
      flags.sort(function (a, b) {
        if (a.char && !b.char) return -1;
        if (b.char && !a.char) return 1;
        if (a.name < b.name) return -1;
        if (b.name < a.name) return 1;
        return 0;
      });
      return this.renderList(flags.map(function (f) {
        var label = [];
        if (f.char) label.push('-' + f.char);
        if (f.name) label.push(' --' + f.name);
        var usage = f.hasValue ? ' ' + f.name.toUpperCase() : '';
        var description = f.description || '';
        if (f.required || f.optional === false) description = '(required) ' + description;
        return [label.join(',').trim() + usage, description];
      }));
    }
  }, {
    key: 'usage',
    value: function usage(command) {
      if (command.usage) return command.usage;
      var cmd = command.command ? command.topic + ':' + command.command : command.topic;
      if (!command.args) return cmd;
      var args = command.args.map(this.renderArg);
      return cmd + ' ' + args.join(' ');
    }
  }, {
    key: 'renderList',
    value: function renderList(items) {
      var _this3 = this;

      var S = require('string');
      var max = require('lodash.maxby');

      var maxLength = max(items, '[0].length')[0].length + 1;
      var lines = items.map(function (i) {
        return [
        // left side
        ' ' + S(i[0]).padRight(maxLength),

        // right side
        i[1] ? _this3.linewrap(maxLength + 4, i[1]) : ''];
      })
      // join left + right side
      .map(function (i) {
        return i[1] ? i[0] + ' # ' + i[1] : i[0];
      });
      return lines.join('\n');
    }
  }, {
    key: 'linewrap',
    value: function linewrap(length, s) {
      var linewrap = require('./output/linewrap');
      return linewrap(length, _screen.stdtermwidth, {
        skipScheme: 'ansi-color'
      })(s).trim();
    }
  }]);
  return Topic;
}(_output2.default);

module.exports = Topic;