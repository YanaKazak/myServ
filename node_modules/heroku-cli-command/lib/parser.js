'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Parse = function () {
  function Parse(cmd) {
    (0, _classCallCheck3.default)(this, Parse);
    this.flags = {};
    this.args = {};

    this.cmd = cmd;
  }

  (0, _createClass3.default)(Parse, [{
    key: 'parse',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
        var _this = this;

        var parseFlags = function () {
          var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, flag;

            return _regenerator2.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context.prev = 3;
                    _iterator = (0, _getIterator3.default)(flags || []);

                  case 5:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                      _context.next = 20;
                      break;
                    }

                    flag = _step.value;

                    if (!this.flags[flag.name]) {
                      _context.next = 11;
                      break;
                    }

                    if (flag.parse) this.flags[flag.name] = flag.parse(this.flags[flag.name], this.cmd);
                    _context.next = 17;
                    break;

                  case 11:
                    if (!flag.default) {
                      _context.next = 15;
                      break;
                    }

                    _context.next = 14;
                    return flag.default(this.cmd);

                  case 14:
                    this.flags[flag.name] = _context.sent;

                  case 15:
                    if (!(!this.flags[flag.name] && (flag.optional === false || flag.required === true))) {
                      _context.next = 17;
                      break;
                    }

                    throw new Error('Missing required flag --' + flag.name);

                  case 17:
                    _iteratorNormalCompletion = true;
                    _context.next = 5;
                    break;

                  case 20:
                    _context.next = 26;
                    break;

                  case 22:
                    _context.prev = 22;
                    _context.t0 = _context['catch'](3);
                    _didIteratorError = true;
                    _iteratorError = _context.t0;

                  case 26:
                    _context.prev = 26;
                    _context.prev = 27;

                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }

                  case 29:
                    _context.prev = 29;

                    if (!_didIteratorError) {
                      _context.next = 32;
                      break;
                    }

                    throw _iteratorError;

                  case 32:
                    return _context.finish(29);

                  case 33:
                    return _context.finish(26);

                  case 34:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, this, [[3, 22, 26, 34], [27,, 29, 33]]);
          }));

          return function parseFlags() {
            return _ref2.apply(this, arguments);
          };
        }();

        var args, flags, parsingArgs, parseFlag, findLongFlag, findShortFlag, parsingFlags, arg, expected, missingArg;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                args = this.cmd.constructor.args.slice(0);
                flags = this.cmd.constructor.flags;
                parsingArgs = this.cmd.argv.slice(2);

                parseFlag = function parseFlag(arg) {
                  var long = arg.startsWith('--');
                  var flag = long ? findLongFlag(arg) : findShortFlag(arg);
                  if (!flag) return false;
                  var cur = _this.flags[flag.name];
                  if (flag.hasValue) {
                    if (cur) throw new Error('Flag --' + flag.name + ' already provided');
                    var val = long || arg.length < 3 ? parsingArgs.shift() : arg.slice(2);
                    if (!val) throw new Error('Flag --' + flag.name + ' expects a value.');
                    _this.flags[flag.name] = val;
                  } else {
                    if (!cur) _this.flags[flag.name] = true;
                    // push the rest of the short characters back on the stack
                    if (!long && arg.length > 2) parsingArgs.unshift('-' + arg.slice(2));
                  }
                  return true;
                };

                findLongFlag = function findLongFlag(arg) {
                  return flags.find(function (f) {
                    return f.name === arg.slice(2);
                  });
                };

                findShortFlag = function findShortFlag(arg) {
                  return flags.find(function (f) {
                    return f.char === arg[1];
                  });
                };

                parsingFlags = true;

              case 7:
                if (!parsingArgs.length) {
                  _context2.next = 21;
                  break;
                }

                arg = parsingArgs.shift();

                if (!(parsingFlags && arg.startsWith('-'))) {
                  _context2.next = 15;
                  break;
                }

                if (!(arg === '--')) {
                  _context2.next = 13;
                  break;
                }

                parsingFlags = false;return _context2.abrupt('continue', 7);

              case 13:
                if (!parseFlag(arg)) {
                  _context2.next = 15;
                  break;
                }

                return _context2.abrupt('continue', 7);

              case 15:
                // TODO: varargs
                expected = args.shift();

                if (expected) {
                  _context2.next = 18;
                  break;
                }

                throw new Error('Unexpected argument ' + arg);

              case 18:
                this.args[expected.name] = arg;
                _context2.next = 7;
                break;

              case 21:
                missingArg = args.find(function (a) {
                  return a.optional !== true && a.required !== false;
                });

                if (!missingArg) {
                  _context2.next = 24;
                  break;
                }

                throw new Error('Missing required argument ' + missingArg.name);

              case 24:
                _context2.next = 26;
                return parseFlags.call(this);

              case 26:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function parse() {
        return _ref.apply(this, arguments);
      }

      return parse;
    }()
  }]);
  return Parse;
}();

exports.default = Parse;