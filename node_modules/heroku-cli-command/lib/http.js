'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _httpCall = require('http-call');

var _httpCall2 = _interopRequireDefault(_httpCall);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (cmd) {
  return function (_http) {
    (0, _inherits3.default)(HTTP, _http);

    function HTTP() {
      var _ref;

      var _temp, _this, _ret;

      (0, _classCallCheck3.default)(this, HTTP);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = HTTP.__proto__ || (0, _getPrototypeOf2.default)(HTTP)).call.apply(_ref, [this].concat(args))), _this), _this.headers = {
        'user-agent': cmd.config.name + '/' + cmd.config.version + ' node-' + process.version
      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(HTTP, [{
      key: 'request',
      value: function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.logRequest();
                  _context.next = 3;
                  return (0, _get3.default)(HTTP.prototype.__proto__ || (0, _getPrototypeOf2.default)(HTTP.prototype), 'request', this).call(this);

                case 3:
                  this.logResponse();

                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function request() {
          return _ref2.apply(this, arguments);
        }

        return request;
      }()
    }, {
      key: 'renderHeaders',
      value: function renderHeaders(headers) {
        return (0, _keys2.default)(headers).map(function (key) {
          var value = key.toUpperCase() === 'AUTHORIZATION' ? 'REDACTED' : headers[key];
          return '    ' + key + '=' + value;
        }).join('\n');
      }
    }, {
      key: 'logRequest',
      value: function logRequest() {
        if (!this.debugging) return;
        cmd.error('--> ' + this.method + ' ' + this.url);
        if (cmd.debugging > 1) {
          cmd.error(this.renderHeaders(this.headers));
          // if (body) this.error(`--- BODY\n${util.inspect(body)}\n---`)
        }
      }
    }, {
      key: 'logResponse',
      value: function logResponse() {
        if (!this.debugging) return;
        cmd.error('<-- ' + this.method + ' ' + this.url + ' ' + this.response.statusCode);
        if (cmd.debugging > 1) {
          cmd.error(this.renderHeaders(this.response.headers));
          if (this.body) cmd.error('--- BODY\n' + _util2.default.inspect(this.body) + '\n---');
        }
      }
    }]);
    return HTTP;
  }(_httpCall2.default);
};