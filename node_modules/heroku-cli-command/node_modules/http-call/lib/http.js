'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function concat(stream) {
  return new _promise2.default(function (resolve) {
    var strings = [];
    stream.on('data', function (data) {
      return strings.push(data);
    });
    stream.on('end', function () {
      return resolve(strings.join(''));
    });
  });
}

/**
 * @typedef {Object} RequestOptions
 * @property {Object.<string, string>} headers - request headers
 * @property {string} method - request method (GET/POST/etc)
 * @property {(string)} body - request body. Sets content-type to application/json and stringifies when object
 */

/* global
  http$IncomingMessage
*/

/**
 * Utility for simple HTTP calls
 * @class
 */
var HTTP = function () {
  (0, _createClass3.default)(HTTP, null, [{
    key: 'get',

    /**
     * make an http GET request
     * @param {string} url - url or path to call
     * @param {RequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.get('https://google.com')
     * ```
     */
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var http;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                http = new this(url, { method: 'GET' }, options);
                _context.next = 3;
                return http.request();

              case 3:
                return _context.abrupt('return', http.body);

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x) {
        return _ref.apply(this, arguments);
      }

      return get;
    }()

    /**
     * make a streaming request
     * @param {string} url - url or path to call
     * @param {RequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * let rsp = await http.get('https://google.com')
     * rsp.on('data', console.log)
     * ```
     */

  }, {
    key: 'stream',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var http;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                http = new this(url, { method: 'GET', raw: true }, options);
                _context2.next = 3;
                return http.request();

              case 3:
                return _context2.abrupt('return', http.response);

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function stream(_x3) {
        return _ref2.apply(this, arguments);
      }

      return stream;
    }()
  }]);

  function HTTP(url) {
    (0, _classCallCheck3.default)(this, HTTP);
    this.method = 'GET';
    this.host = 'localhost';
    this.port = 0;
    this.protocol = 'https:';
    this.path = '/';
    this.raw = false;
    this.headers = {
      'user-agent': _package2.default.name + '/' + _package2.default.version + ' node-' + process.version
    };

    this.HTTPError = function (_Error) {
      (0, _inherits3.default)(HTTPError, _Error);

      function HTTPError(http, body) {
        (0, _classCallCheck3.default)(this, HTTPError);

        body = '\n' + _util2.default.inspect(body);

        var _this = (0, _possibleConstructorReturn3.default)(this, (HTTPError.__proto__ || (0, _getPrototypeOf2.default)(HTTPError)).call(this, 'HTTP Error ' + http.response.statusCode + ' for ' + http.method + ' ' + http.url + body));

        _this.statusCode = http.response.statusCode;
        return _this;
      }

      return HTTPError;
    }(Error);

    for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      options[_key - 1] = arguments[_key];
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _getIterator3.default)(options), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var o = _step.value;
        this.addOptions(o);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var u = _url2.default.parse(url);
    this.protocol = u.protocol || this.protocol;
    this.host = u.host || this.host;
    this.port = u.port || this.port || (this.protocol === 'https:' ? 443 : 80);
    this.path = u.path || this.path;
  }

  (0, _createClass3.default)(HTTP, [{
    key: 'addOptions',
    value: function addOptions(options) {
      var headers = (0, _assign2.default)(this.headers, options.headers);
      (0, _assign2.default)(this, options);
      this.headers = headers;
    }
  }, {
    key: 'request',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.performRequest();

              case 2:
                this.response = _context3.sent;

                if (!(this.response.statusCode >= 200 && this.response.statusCode < 300)) {
                  _context3.next = 7;
                  break;
                }

                if (!this.raw) this.body = this.parse(this.response);
                _context3.next = 13;
                break;

              case 7:
                _context3.t0 = this.HTTPError;
                _context3.t1 = this;
                _context3.next = 11;
                return this.parse(this.response);

              case 11:
                _context3.t2 = _context3.sent;
                throw new _context3.t0(_context3.t1, _context3.t2);

              case 13:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function request() {
        return _ref3.apply(this, arguments);
      }

      return request;
    }()
  }, {
    key: 'performRequest',
    value: function performRequest() {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {
        var request = _this2.http.request(_this2, resolve);
        request.on('error', reject);
        request.end();
      });
    }
  }, {
    key: 'parse',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(response) {
        var body;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return concat(response);

              case 2:
                body = _context4.sent;
                return _context4.abrupt('return', response.headers['content-type'] === 'application/json' ? JSON.parse(body) : body);

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function parse(_x5) {
        return _ref4.apply(this, arguments);
      }

      return parse;
    }()
  }, {
    key: 'http',
    get: function get() {
      return this.protocol === 'https:' ? _https2.default : _http2.default;
    }
  }, {
    key: 'url',
    get: function get() {
      return this.protocol + '//' + this.host + this.path;
    }
  }]);
  return HTTP;
}();

exports.default = HTTP;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,